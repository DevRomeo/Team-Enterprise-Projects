'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8009
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.8009.
'
Namespace EDIService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Service
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private getBranchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private insertToWu_unknownbcOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isActionedWu_kebotOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isActionedEdiTableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private insertBaseEDIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private insertToTransactionsPendingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private insertDescEDIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private logdbOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getGuidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private alreadySavedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private insertTransactionWithDescOperationCompleted As System.Threading.SendOrPostCallback
        
        Private validateUserByIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.SynergyEDIVISAYAS2008.My.MySettings.Default.SynergyEDIVISAYAS2008_EDIService_Service
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event getBranchCompleted As getBranchCompletedEventHandler
        
        '''<remarks/>
        Public Event insertToWu_unknownbcCompleted As insertToWu_unknownbcCompletedEventHandler
        
        '''<remarks/>
        Public Event isActionedWu_kebotCompleted As isActionedWu_kebotCompletedEventHandler
        
        '''<remarks/>
        Public Event isActionedEdiTableCompleted As isActionedEdiTableCompletedEventHandler
        
        '''<remarks/>
        Public Event insertBaseEDICompleted As insertBaseEDICompletedEventHandler
        
        '''<remarks/>
        Public Event insertToTransactionsPendingCompleted As insertToTransactionsPendingCompletedEventHandler
        
        '''<remarks/>
        Public Event insertDescEDICompleted As insertDescEDICompletedEventHandler
        
        '''<remarks/>
        Public Event logdbCompleted As logdbCompletedEventHandler
        
        '''<remarks/>
        Public Event getGuidCompleted As getGuidCompletedEventHandler
        
        '''<remarks/>
        Public Event alreadySavedCompleted As alreadySavedCompletedEventHandler
        
        '''<remarks/>
        Public Event insertTransactionWithDescCompleted As insertTransactionWithDescCompletedEventHandler
        
        '''<remarks/>
        Public Event validateUserByIdCompleted As validateUserByIdCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getBranch", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getBranch(ByVal bcode As String, ByVal edi As String) As String
            Dim results() As Object = Me.Invoke("getBranch", New Object() {bcode, edi})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getBranchAsync(ByVal bcode As String, ByVal edi As String)
            Me.getBranchAsync(bcode, edi, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getBranchAsync(ByVal bcode As String, ByVal edi As String, ByVal userState As Object)
            If (Me.getBranchOperationCompleted Is Nothing) Then
                Me.getBranchOperationCompleted = AddressOf Me.OngetBranchOperationCompleted
            End If
            Me.InvokeAsync("getBranch", New Object() {bcode, edi}, Me.getBranchOperationCompleted, userState)
        End Sub
        
        Private Sub OngetBranchOperationCompleted(ByVal arg As Object)
            If (Not (Me.getBranchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getBranchCompleted(Me, New getBranchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/insertToWu_unknownbc", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function insertToWu_unknownbc(ByVal bcode As String, ByVal dr1 As String, ByVal dr2 As String, ByVal edi As String) As String
            Dim results() As Object = Me.Invoke("insertToWu_unknownbc", New Object() {bcode, dr1, dr2, edi})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub insertToWu_unknownbcAsync(ByVal bcode As String, ByVal dr1 As String, ByVal dr2 As String, ByVal edi As String)
            Me.insertToWu_unknownbcAsync(bcode, dr1, dr2, edi, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub insertToWu_unknownbcAsync(ByVal bcode As String, ByVal dr1 As String, ByVal dr2 As String, ByVal edi As String, ByVal userState As Object)
            If (Me.insertToWu_unknownbcOperationCompleted Is Nothing) Then
                Me.insertToWu_unknownbcOperationCompleted = AddressOf Me.OninsertToWu_unknownbcOperationCompleted
            End If
            Me.InvokeAsync("insertToWu_unknownbc", New Object() {bcode, dr1, dr2, edi}, Me.insertToWu_unknownbcOperationCompleted, userState)
        End Sub
        
        Private Sub OninsertToWu_unknownbcOperationCompleted(ByVal arg As Object)
            If (Not (Me.insertToWu_unknownbcCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent insertToWu_unknownbcCompleted(Me, New insertToWu_unknownbcCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isActionedWu_kebot", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isActionedWu_kebot(ByVal bcode As String, ByVal month_ern As String, ByVal year_ern As String, ByVal edi As String) As String
            Dim results() As Object = Me.Invoke("isActionedWu_kebot", New Object() {bcode, month_ern, year_ern, edi})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isActionedWu_kebotAsync(ByVal bcode As String, ByVal month_ern As String, ByVal year_ern As String, ByVal edi As String)
            Me.isActionedWu_kebotAsync(bcode, month_ern, year_ern, edi, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isActionedWu_kebotAsync(ByVal bcode As String, ByVal month_ern As String, ByVal year_ern As String, ByVal edi As String, ByVal userState As Object)
            If (Me.isActionedWu_kebotOperationCompleted Is Nothing) Then
                Me.isActionedWu_kebotOperationCompleted = AddressOf Me.OnisActionedWu_kebotOperationCompleted
            End If
            Me.InvokeAsync("isActionedWu_kebot", New Object() {bcode, month_ern, year_ern, edi}, Me.isActionedWu_kebotOperationCompleted, userState)
        End Sub
        
        Private Sub OnisActionedWu_kebotOperationCompleted(ByVal arg As Object)
            If (Not (Me.isActionedWu_kebotCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isActionedWu_kebotCompleted(Me, New isActionedWu_kebotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isActionedEdiTable", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isActionedEdiTable(ByVal tablename As String, ByVal g_month As String, ByVal edi As String) As String
            Dim results() As Object = Me.Invoke("isActionedEdiTable", New Object() {tablename, g_month, edi})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isActionedEdiTableAsync(ByVal tablename As String, ByVal g_month As String, ByVal edi As String)
            Me.isActionedEdiTableAsync(tablename, g_month, edi, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isActionedEdiTableAsync(ByVal tablename As String, ByVal g_month As String, ByVal edi As String, ByVal userState As Object)
            If (Me.isActionedEdiTableOperationCompleted Is Nothing) Then
                Me.isActionedEdiTableOperationCompleted = AddressOf Me.OnisActionedEdiTableOperationCompleted
            End If
            Me.InvokeAsync("isActionedEdiTable", New Object() {tablename, g_month, edi}, Me.isActionedEdiTableOperationCompleted, userState)
        End Sub
        
        Private Sub OnisActionedEdiTableOperationCompleted(ByVal arg As Object)
            If (Not (Me.isActionedEdiTableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isActionedEdiTableCompleted(Me, New isActionedEdiTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/insertBaseEDI", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function insertBaseEDI(ByVal json As String, ByVal tableName As String, ByVal edi As String) As String
            Dim results() As Object = Me.Invoke("insertBaseEDI", New Object() {json, tableName, edi})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub insertBaseEDIAsync(ByVal json As String, ByVal tableName As String, ByVal edi As String)
            Me.insertBaseEDIAsync(json, tableName, edi, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub insertBaseEDIAsync(ByVal json As String, ByVal tableName As String, ByVal edi As String, ByVal userState As Object)
            If (Me.insertBaseEDIOperationCompleted Is Nothing) Then
                Me.insertBaseEDIOperationCompleted = AddressOf Me.OninsertBaseEDIOperationCompleted
            End If
            Me.InvokeAsync("insertBaseEDI", New Object() {json, tableName, edi}, Me.insertBaseEDIOperationCompleted, userState)
        End Sub
        
        Private Sub OninsertBaseEDIOperationCompleted(ByVal arg As Object)
            If (Not (Me.insertBaseEDICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent insertBaseEDICompleted(Me, New insertBaseEDICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/insertToTransactionsPending", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function insertToTransactionsPending(ByVal jsondata As String, ByVal edi As String) As String
            Dim results() As Object = Me.Invoke("insertToTransactionsPending", New Object() {jsondata, edi})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub insertToTransactionsPendingAsync(ByVal jsondata As String, ByVal edi As String)
            Me.insertToTransactionsPendingAsync(jsondata, edi, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub insertToTransactionsPendingAsync(ByVal jsondata As String, ByVal edi As String, ByVal userState As Object)
            If (Me.insertToTransactionsPendingOperationCompleted Is Nothing) Then
                Me.insertToTransactionsPendingOperationCompleted = AddressOf Me.OninsertToTransactionsPendingOperationCompleted
            End If
            Me.InvokeAsync("insertToTransactionsPending", New Object() {jsondata, edi}, Me.insertToTransactionsPendingOperationCompleted, userState)
        End Sub
        
        Private Sub OninsertToTransactionsPendingOperationCompleted(ByVal arg As Object)
            If (Not (Me.insertToTransactionsPendingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent insertToTransactionsPendingCompleted(Me, New insertToTransactionsPendingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/insertDescEDI", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function insertDescEDI(ByVal json As String, ByVal tableName As String, ByVal desc As String, ByVal edi As String) As String
            Dim results() As Object = Me.Invoke("insertDescEDI", New Object() {json, tableName, desc, edi})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub insertDescEDIAsync(ByVal json As String, ByVal tableName As String, ByVal desc As String, ByVal edi As String)
            Me.insertDescEDIAsync(json, tableName, desc, edi, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub insertDescEDIAsync(ByVal json As String, ByVal tableName As String, ByVal desc As String, ByVal edi As String, ByVal userState As Object)
            If (Me.insertDescEDIOperationCompleted Is Nothing) Then
                Me.insertDescEDIOperationCompleted = AddressOf Me.OninsertDescEDIOperationCompleted
            End If
            Me.InvokeAsync("insertDescEDI", New Object() {json, tableName, desc, edi}, Me.insertDescEDIOperationCompleted, userState)
        End Sub
        
        Private Sub OninsertDescEDIOperationCompleted(ByVal arg As Object)
            If (Not (Me.insertDescEDICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent insertDescEDICompleted(Me, New insertDescEDICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/logdb", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function logdb(ByVal datetimelog As String, ByVal application As String, ByVal activity As String, ByVal resource As String, ByVal department As String, ByVal remarks As String) As String
            Dim results() As Object = Me.Invoke("logdb", New Object() {datetimelog, application, activity, resource, department, remarks})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub logdbAsync(ByVal datetimelog As String, ByVal application As String, ByVal activity As String, ByVal resource As String, ByVal department As String, ByVal remarks As String)
            Me.logdbAsync(datetimelog, application, activity, resource, department, remarks, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub logdbAsync(ByVal datetimelog As String, ByVal application As String, ByVal activity As String, ByVal resource As String, ByVal department As String, ByVal remarks As String, ByVal userState As Object)
            If (Me.logdbOperationCompleted Is Nothing) Then
                Me.logdbOperationCompleted = AddressOf Me.OnlogdbOperationCompleted
            End If
            Me.InvokeAsync("logdb", New Object() {datetimelog, application, activity, resource, department, remarks}, Me.logdbOperationCompleted, userState)
        End Sub
        
        Private Sub OnlogdbOperationCompleted(ByVal arg As Object)
            If (Not (Me.logdbCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent logdbCompleted(Me, New logdbCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getGuid", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getGuid() As String
            Dim results() As Object = Me.Invoke("getGuid", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getGuidAsync()
            Me.getGuidAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getGuidAsync(ByVal userState As Object)
            If (Me.getGuidOperationCompleted Is Nothing) Then
                Me.getGuidOperationCompleted = AddressOf Me.OngetGuidOperationCompleted
            End If
            Me.InvokeAsync("getGuid", New Object(-1) {}, Me.getGuidOperationCompleted, userState)
        End Sub
        
        Private Sub OngetGuidOperationCompleted(ByVal arg As Object)
            If (Not (Me.getGuidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getGuidCompleted(Me, New getGuidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/alreadySaved", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function alreadySaved(ByVal bcode As String, ByVal month As String, ByVal year As String, ByVal companyDesc As String, ByVal edi As String) As String
            Dim results() As Object = Me.Invoke("alreadySaved", New Object() {bcode, month, year, companyDesc, edi})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub alreadySavedAsync(ByVal bcode As String, ByVal month As String, ByVal year As String, ByVal companyDesc As String, ByVal edi As String)
            Me.alreadySavedAsync(bcode, month, year, companyDesc, edi, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub alreadySavedAsync(ByVal bcode As String, ByVal month As String, ByVal year As String, ByVal companyDesc As String, ByVal edi As String, ByVal userState As Object)
            If (Me.alreadySavedOperationCompleted Is Nothing) Then
                Me.alreadySavedOperationCompleted = AddressOf Me.OnalreadySavedOperationCompleted
            End If
            Me.InvokeAsync("alreadySaved", New Object() {bcode, month, year, companyDesc, edi}, Me.alreadySavedOperationCompleted, userState)
        End Sub
        
        Private Sub OnalreadySavedOperationCompleted(ByVal arg As Object)
            If (Not (Me.alreadySavedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent alreadySavedCompleted(Me, New alreadySavedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/insertTransactionWithDesc", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function insertTransactionWithDesc(ByVal jsondata As String, ByVal jsonediTableData As String, ByVal tableName As String, ByVal desc As String, ByVal edi As String) As String
            Dim results() As Object = Me.Invoke("insertTransactionWithDesc", New Object() {jsondata, jsonediTableData, tableName, desc, edi})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub insertTransactionWithDescAsync(ByVal jsondata As String, ByVal jsonediTableData As String, ByVal tableName As String, ByVal desc As String, ByVal edi As String)
            Me.insertTransactionWithDescAsync(jsondata, jsonediTableData, tableName, desc, edi, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub insertTransactionWithDescAsync(ByVal jsondata As String, ByVal jsonediTableData As String, ByVal tableName As String, ByVal desc As String, ByVal edi As String, ByVal userState As Object)
            If (Me.insertTransactionWithDescOperationCompleted Is Nothing) Then
                Me.insertTransactionWithDescOperationCompleted = AddressOf Me.OninsertTransactionWithDescOperationCompleted
            End If
            Me.InvokeAsync("insertTransactionWithDesc", New Object() {jsondata, jsonediTableData, tableName, desc, edi}, Me.insertTransactionWithDescOperationCompleted, userState)
        End Sub
        
        Private Sub OninsertTransactionWithDescOperationCompleted(ByVal arg As Object)
            If (Not (Me.insertTransactionWithDescCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent insertTransactionWithDescCompleted(Me, New insertTransactionWithDescCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/validateUserById", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function validateUserById(ByVal userId As String) As String
            Dim results() As Object = Me.Invoke("validateUserById", New Object() {userId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub validateUserByIdAsync(ByVal userId As String)
            Me.validateUserByIdAsync(userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub validateUserByIdAsync(ByVal userId As String, ByVal userState As Object)
            If (Me.validateUserByIdOperationCompleted Is Nothing) Then
                Me.validateUserByIdOperationCompleted = AddressOf Me.OnvalidateUserByIdOperationCompleted
            End If
            Me.InvokeAsync("validateUserById", New Object() {userId}, Me.validateUserByIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnvalidateUserByIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.validateUserByIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent validateUserByIdCompleted(Me, New validateUserByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub getBranchCompletedEventHandler(ByVal sender As Object, ByVal e As getBranchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getBranchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub insertToWu_unknownbcCompletedEventHandler(ByVal sender As Object, ByVal e As insertToWu_unknownbcCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class insertToWu_unknownbcCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub isActionedWu_kebotCompletedEventHandler(ByVal sender As Object, ByVal e As isActionedWu_kebotCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isActionedWu_kebotCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub isActionedEdiTableCompletedEventHandler(ByVal sender As Object, ByVal e As isActionedEdiTableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isActionedEdiTableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub insertBaseEDICompletedEventHandler(ByVal sender As Object, ByVal e As insertBaseEDICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class insertBaseEDICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub insertToTransactionsPendingCompletedEventHandler(ByVal sender As Object, ByVal e As insertToTransactionsPendingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class insertToTransactionsPendingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub insertDescEDICompletedEventHandler(ByVal sender As Object, ByVal e As insertDescEDICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class insertDescEDICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub logdbCompletedEventHandler(ByVal sender As Object, ByVal e As logdbCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class logdbCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub getGuidCompletedEventHandler(ByVal sender As Object, ByVal e As getGuidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getGuidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub alreadySavedCompletedEventHandler(ByVal sender As Object, ByVal e As alreadySavedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class alreadySavedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub insertTransactionWithDescCompletedEventHandler(ByVal sender As Object, ByVal e As insertTransactionWithDescCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class insertTransactionWithDescCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")>  _
    Public Delegate Sub validateUserByIdCompletedEventHandler(ByVal sender As Object, ByVal e As validateUserByIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class validateUserByIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
