@using System.Web.Optimization
@model ML.Web.Models.RegisterAccountModel
@{
    ViewBag.Title = "Registration";
}
@Styles.Render("~/Content/Registration")
@if (!Request.IsAuthenticated)
{
    if (!Model.isValidMobile)
    {
        <div class="stepwizard">
            <div class="stepwizard-row">
                <div class="stepwizard-step">
                    <button type="button" class="btn btn-primary btn-circle" disabled>1</button>
                </div>
                <div class="stepwizard-step">
                    <button type="button" class="btn btn-default btn-circle" disabled>2</button>
                </div>
            </div>
        </div>

        <div class="container">
            <div class="row">
                <div class="form-horizontal">
                    <div class="col-lg-offset-3 col-lg-6 col-md-offset-3 col-md-6 col-sm-offset-3 col-sm-6">
                        <div class="box">
                            <div class="icon">
                                <div class="image"></div>
                                <div class="info">
                                    <div class="form-group">
                                        <label class="control-label col-lg-3 col-md-3 col-sm-3 hidden-xs">UserName </label>
                                        <div class="input-group col-lg-7 col-md-7 col-sm-7 col-xs-offset-1 col-xs-10">
                                            <span class="input-group-addon"><i class="glyphicon glyphicon-user"></i></span>
                                            <input type="text" class="form-control Wallet text-center" data-valid="^([a-zA-Z0-9])$" maxlength="14" placeholder="ML Wallet Username" required />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-lg-3 col-md-3 col-sm-3 hidden-xs">Password </label>
                                        <div class="input-group col-lg-7 col-md-7 col-sm-7 col-xs-offset-1 col-xs-10">
                                            <span class="input-group-addon"><i class="glyphicon glyphicon-lock"></i></span>
                                            <input type="password" class="form-control WalletP text-center" maxlength="15" placeholder="ML Wallet password" required />
                                        </div>
                                    </div>
                                    <button type="button" class="btn btn-lg btn-primary btn-group-lg AuthenticateAccount" data-url="@Url.Action("GetWalletInfo", "User", Request.Url.Scheme)">
                                        Validate Information
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="container">
            <div class="row">
                <div class="col-lg-offset-3 col-lg-9 col-md-offset-3 col-md-9 col-sm-offset-2 col-sm-8">
                    <h4 class="btn-group-justified">Don't have ML Wallet?</h4>
                    <a class="btn btn-lg btn-primary big-btn android-btn" href="https://itunes.apple.com/ph/app/ml-wallet/id962204987?mt=8">
                        <i class="glyphicon glyphicon-phone pull-left"></i><div class="btn-text"><small>Available on the</small><br><strong>App Store</strong></div>
                    </a>
                    <a class="btn btn-lg btn-success big-btn android-btn" href="https://play.google.com/store/apps/details?id=com.mlhuillier.mlwallet&hl=en">                        
                        <div class="pull-left "><img src="~/Content/css/gplay.png" class="PlayStore" alt="" /></div><div class="btn-text"><small>Available on</small><br><strong>Google Play</strong></div>
                    </a>
                </div>
            </div>
        </div>
    }
    if (Model.isValidMobile)
    {
        <div class="stepwizard">
            <div class="stepwizard-row">
                <div class="stepwizard-step">
                    <button type="button" class="btn btn-default btn-circle" disabled>1</button>
                </div>
                <div class="stepwizard-step">
                    <button type="button" class="btn btn-primary btn-circle" disabled>2</button>
                </div>
            </div>
        </div>

        @*<h2 class="header-textcolor" style="margin-top: -2px;">CREATE ACCOUNT</h2>*@
        using (Ajax.BeginForm("RegisterUser", "User", null,
            new AjaxOptions { HttpMethod = "POST", OnSuccess = "onRegisterSuccess", OnBegin = "onRegisterBegin", OnFailure = "onFail" }, new { @autocomplete = "off" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.DeviceID);
    @Html.HiddenFor(model => model.Kyc);
    @Html.HiddenFor(model => model.Wallet);
    <div class="form-horizontal">
        <div class="container-fluid">
            <div class="error-container-register"></div>
            <div class="row">
                <div class="col-lg-6">
                    <!--Full Name-->
                    <div class="form-group">
                        <label class="control-label col-md-2 col-sm-2">Full Name </label>
                        <div class="col-md-10 col-sm-10 input-group-sm">
                            @Html.HiddenFor(model => model.lastname)
                            @Html.HiddenFor(model => model.firstname)
                            @Html.HiddenFor(model => model.middlename)
                            <span class="form-control">@Model.firstname @Model.middlename @Model.lastname</span>
                        </div>
                    </div>
                    <!--Birthdate-->
                    <div class="form-group">
                        @Html.LabelFor(model => model.birthdate, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2 col-xs-12" })
                        <div class="col-md-4 col-sm-4 col-xs-4 input-group-sm">
                            @Html.DropDownListFor(model => model.selectedmonth, Model.month, new { @class = "form-control", disabled = "disabled" })
                            @Html.HiddenFor(m => m.selectedmonth)
                        </div>
                        <div class="col-md-3 col-sm-3 col-xs-4 input-group-sm">
                            @Html.DropDownListFor(model => model.selectedday, Model.day, new { @class = "form-control", disabled = "disabled" })
                            @Html.HiddenFor(m => m.selectedday)
                        </div>
                        <div class="col-md-3 col-sm-3 col-xs-4 input-group-sm">
                            @Html.DropDownListFor(model => model.selectedyear, Model.year, new { @class = "form-control", disabled = "disabled" })
                            @Html.HiddenFor(m => m.selectedyear)
                        </div>
                    </div>
                    <!--Address-->
                    <div class="form-group required">
                        @Html.LabelFor(model => model.address, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                        <div class="col-md-10 col-sm-10 input-group-sm">
                            <div class="input-group">
                                <span class="input-group-addon">
                                    <i class="glyphicon glyphicon-home"></i>
                                </span>
                                @Html.EditorFor(model => model.address, new { htmlAttributes = new { @class = "form-control", @tabindex = "1" } })
                            </div>
                            @Html.ValidationMessageFor(m => m.address)
                        </div>
                    </div>
                    <!--Gender-->
                    <div class="form-group">
                        @Html.LabelFor(model => model.gender, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                        <div class="col-md-10 col-sm-10 input-group-sm">
                            @Html.DropDownListFor(model => model.selectedgender, Model.gender, new { @class = "form-control" })
                        </div>
                    </div>
                    <!--User Name-->
                    <div class="form-group required">
                        @Html.LabelFor(model => model.username, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                        <div class="col-md-10 col-sm-10 input-group-sm">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-user"></i></span>
                                @Html.EditorFor(model => model.username, new { htmlAttributes = new { @class = "form-control", @tabindex = "2" } })
                            </div>
                            @Html.ValidationMessageFor(m => m.username)
                        </div>
                    </div>
                    <!--Password-->
                    <div class="form-group required">
                        @Html.LabelFor(model => model.password, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                        <div class="col-md-10 col-sm-10 input-group-sm">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-lock"></i></span>
                                @Html.PasswordFor(model => model.password, new { @class = "form-control", @tabindex = "3" })
                            </div>
                            @Html.ValidationMessageFor(m => m.password)
                        </div>
                    </div>
                    <!--Confirm Password-->
                    <div class="form-group required">
                        @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                        <div class="col-md-10 col-sm-10 input-group-sm">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-lock"></i></span>
                                @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control", @tabindex = "4" })
                            </div>
                            @Html.ValidationMessageFor(m => m.ConfirmPassword)
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <!--Mobile-->
                    <div class="form-group">
                        @Html.LabelFor(model => model.mobileno, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                        <div class="col-md-10 col-sm-10 input-group-sm">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-phone"></i></span>
                                @Html.EditorFor(model => model.mobileno, new { htmlAttributes = new { @class = "form-control", @tabindex = "4", @data_valid = "^([0-9+])$" } })
                            </div>
                            @Html.ValidationMessageFor(m => m.mobileno)
                        </div>
                    </div>
                    <!--Phone-->
                    <div class="form-group">
                        @Html.LabelFor(model => model.phoneno, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                        <div class="col-md-10 col-sm-10 input-group-sm">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-phone-alt"></i></span>
                                @Html.EditorFor(model => model.phoneno, new { htmlAttributes = new { @class = "form-control", @placeholder = "(000) 000-0000", @data_valid = "^([0-9-( )])$", @tabindex = "5" } })
                            </div>
                            @Html.ValidationMessageFor(m => m.phoneno)
                        </div>
                    </div>
                    <!--Email-->
                    <div class="form-group required">
                        @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                        <div class="col-md-10 col-sm-10 input-group-sm">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-envelope"></i></span>
                                @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control", @tabindex = "6" } })
                            </div>
                            @Html.ValidationMessageFor(m => m.email)
                        </div>
                    </div>
                    <!--Country-->
                    <div class="form-group">
                        @Html.LabelFor(model => model.country, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                        <div class="col-md-10 col-sm-10 input-group-sm">
                            @Html.DropDownListFor(model => model.selectedcountry, Model.country, "-- Select --", new { @class = "form-control", disabled = "disabled" })
                            @Html.HiddenFor(m => m.selectedcountry)
                        </div>
                    </div>
                    <!--Nationality-->
                    <div class="form-group">
                        @Html.LabelFor(model => model.nationality, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                        <div class="col-md-10 col-sm-10 input-group-sm">
                            @Html.EditorFor(model => model.nationality, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        </div>
                    </div>
                    <!--Government ID Type-->
                    <div class="form-group required">
                        @Html.LabelFor(model => model.selectedgovidtype, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                        <div class="col-md-10 col-sm-10 input-group-sm">
                            @Html.DropDownListFor(model => model.selectedgovidtype, Model.govIdType, "-- Select ID Type --", new { @id = "selectedgovidtype", @class = "form-control", @tabindex = "6" })
                            @Html.ValidationMessageFor(m => m.selectedgovidtype)
                        </div>

                    </div>
                    <!--ID-->
                    <div class="form-group required">
                        @Html.LabelFor(model => model.govid2, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                        <div class="col-md-10 col-sm-10 input-group-sm">
                            @Html.EditorFor(model => model.govid2, new { htmlAttributes = new { @class = "form-control", @tabindex = "7" } })
                            @Html.ValidationMessageFor(m => m.govid2)
                        </div>
                    </div>
                    <!---->
                    <div class="form-group">
                        <div class="col-sm-2"></div>
                        <div class="col-md-6 col-sm-6 input-group-sm">
                            <div class="checkbox-inline">
                                @Html.CheckBoxFor(m => m.Terms)
                                @Html.LabelFor(model => model.Terms)
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-sm-2"></div>
                        <div class="col-md-6 col-sm-6 input-group-sm">
                            <button id="btnregister" class="btn btn-primary" tabindex="9" disabled>Sign Up</button>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
        }
    }
    @section scripts
    {
        @Scripts.Render("~/bundles/jqueryval")
        @Scripts.Render("~/bundles/AccountRegistration")
    }

}
else
{
    Response.Redirect("/");
}


