@using System.Web.Optimization
@model ML.Web.Models.UpdateEmployeeViewModel
@{
    ViewBag.Title = "Edit";
}
<div class="container-fluid">
    <div class="panel panel-default">
        <div class="panel panel-heading">
            <h4 class="panel-title header-textcolor">Update Employee</h4>
        </div>

        @using (Ajax.BeginForm("UpdateEmployee", "Employee", null,
    new AjaxOptions { HttpMethod = "POST", OnSuccess = "onUpdateSuccess", OnBegin = "onRequestBegin", OnFailure = "onUpdateFail" }, new { @autocomplete = "off" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-horizontal">
                <div class="container-fluid">
                    <div class="error-container-edit"></div>

                    <div class="row">
                        <div class="col-lg-6">
                            @Html.HiddenFor(model => model.idno)
                            <!--First Name-->
                            <div class="form-group">
                                @Html.LabelFor(model => model.firstname, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-sm-10 input-group-sm">
                                    @Html.EditorFor(model => model.firstname, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                    @Html.ValidationMessageFor(m => m.firstname)
                                </div>
                            </div>
                            <!--Middle Name-->
                            <div class="form-group">
                                @Html.LabelFor(model => model.middlename, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-sm-10 input-group-sm">
                                    @Html.EditorFor(model => model.middlename, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                    @Html.ValidationMessageFor(m => m.middlename)
                                </div>
                            </div>
                            <!--Last Name-->
                            <div class="form-group">
                                @Html.LabelFor(model => model.lastname, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-sm-10 input-group-sm">
                                    @Html.EditorFor(model => model.lastname, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                    @Html.ValidationMessageFor(m => m.lastname)
                                </div>
                            </div>
                            <!--Birthdate-->
                            <div class="form-group">
                                @Html.LabelFor(model => model.birthdate, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2 col-xs-12" })
                                <div class="col-md-4 col-sm-4 col-xs-4 input-group-sm">
                                    @Html.HiddenFor(m => m.selectedmonth)
                                    @Html.DropDownListFor(model => model.selectedmonth, Model.month, new { @class = "form-control", disabled = true })
                                </div>
                                <div class="col-md-3 col-sm-3 col-xs-4 input-group-sm">
                                    @Html.HiddenFor(m => m.selectedday)
                                    @Html.DropDownListFor(model => model.selectedday, Model.day, new { @class = "form-control", disabled = true })
                                </div>
                                <div class="col-md-3 col-sm-3 col-xs-4 input-group-sm">
                                    @Html.HiddenFor(m => m.selectedyear)
                                    @Html.DropDownListFor(model => model.selectedyear, Model.year, new { @class = "form-control", disabled = true })
                                </div>
                            </div>
                            <!--Address-->
                            <div class="form-group required">
                                @Html.LabelFor(model => model.address, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-sm-10 input-group-sm">
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="glyphicon glyphicon-home"></i></span>
                                        @Html.EditorFor(model => model.address, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.address)
                                </div>
                            </div>
                            <!--Gender-->
                            <div class="form-group">
                                @Html.LabelFor(model => model.gender, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-sm-10 input-group-sm">
                                    @Html.DropDownListFor(model => model.selectedgender, Model._gender, new { @class = "form-control", disabled = true })
                                    @Html.HiddenFor(m=>m.selectedgender)
                                    @Html.ValidationMessageFor(model => model.selectedgender, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <!--Mobile-->
                            <div class="form-group">
                                @Html.LabelFor(model => model.mobileno, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-sm-10 input-group-sm">
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="glyphicon glyphicon-phone"></i></span>
                                        @Html.EditorFor(model => model.mobileno, new { htmlAttributes = new { @class = "form-control", @data_valid = "^([0-9+])$" } })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.mobileno)
                                </div>
                            </div>
                            <!--Phone-->
                            <div class="form-group">
                                @Html.LabelFor(model => model.phoneno, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-sm-10 input-group-sm">
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="glyphicon glyphicon-phone-alt"></i></span>
                                        @Html.EditorFor(model => model.phoneno, new { htmlAttributes = new { @class = "form-control", @placeholder = "(000) 000-0000", @data_valid = "^([0-9-() ])$" } })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.phoneno)
                                </div>
                            </div>
                            <!--Email-->
                            <div class="form-group required">
                                @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-sm-10 input-group-sm">
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="glyphicon glyphicon-envelope"></i></span>
                                        @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.email)
                                </div>
                            </div>
                            <!--Country-->
                            <div class="form-group">
                                @Html.LabelFor(model => model.country, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-sm-10 input-group-sm">
                                    @Html.DropDownListFor(model => model.selectedcountry, Model.country, new { @class = "form-control", disabled = true })
                                    @Html.HiddenFor(m=>m.selectedcountry)
                                    @Html.ValidationMessageFor(m => m.selectedcountry)
                                </div>
                            </div>
                            <!--Nationality-->
                            <div class="form-group">
                                @Html.LabelFor(model => model.nationality, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-sm-10 input-group-sm">
                                    @Html.EditorFor(model => model.nationality, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                    @Html.ValidationMessageFor(m => m.nationality)
                                </div>
                            </div>
                            <!--ID Type-->
                            <div class="form-group required">
                                @Html.LabelFor(model => model.selectedgovidtype, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-sm-10 input-group-sm">
                                    @Html.DropDownListFor(model => model.selectedgovidtype, Model.govIdType, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.selectedgovidtype)
                                </div>
                            </div>
                            <!--ID-->
                            <div class="form-group required">
                                @Html.LabelFor(model => model.govid2, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-sm-10 input-group-sm">
                                    @Html.EditorFor(model => model.govid2, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(m => m.govid2)
                                </div>
                            </div>
                            @*<div class="form-group">
                                    <div class="col-sm-2"></div>
                                    <div class="col-md-6 col-sm-6 input-group-sm">
                                        <div class="checkbox-inline">
                                            @Html.CheckBoxFor(m => m.isActive)
                                            @Html.LabelFor(model => model.isActive)
                                        </div>
                                    </div>
                                </div>*@
                            <div class="container-fluid">
                                <div class="form-group pull-right">
                                    <button id="btncreateemployee" class="btn btn-primary" type="submit">
                                        <i class="glyphicon glyphicon-floppy-disk"></i> Save Changes
                                    </button>
                                    <button type="button" class="btn btn-default" onclick="location.href = '@Url.Action("EmployeeList", "Employee")'">
                                        <i class="glyphicon glyphicon-remove-circle"></i> Cancel
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/Employee")
}